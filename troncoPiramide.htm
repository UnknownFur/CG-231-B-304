<!DOCTYPE html>
<html>
<head>
    <title>troncoPiramide</title>
    <style>
        html, body {
            margin: 0;
            padding: 0;
            overflow: hidden;
        }

        #text {
            position: absolute;
            padding: 10px;
            width: 100%;
            text-align: center;
            color: #FFFFFF;
        }
    </style>
</head>
<body>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r94/three.min.js"></script>
    <script type="module" >
        import { OrbitControls } from 'https://unpkg.com/three@0.126.1/examples/jsm/controls/OrbitControls.js';
        
        function poligonoVertices(lado, n, h){
        //Generacion Vectores
        var vertices = [];
        var a = (2*Math.PI) / n;
            for(var i = 0; i <= n; i++){
                x = lado * Math.cos(i*a);
                y = h;
                z = lado * Math.sin(i*a);
                vertices[i]=[x, y, z];
            }
            return vertices;
        }
        function poligonoGeometria(ver, color){
            //Generacion Geometrias por medio de vectores
            var x = new THREE.Vector3(1, 0, 0);
            var y = new THREE.Vector3(0, 1, 0);
            var z = new THREE.Vector3(0, 0, 1);
            var base = new THREE.Geometry();
            var vertices = ver;
            var larVer = vertices.length;
            for(var i = 0; i < larVer; i++){
                x = vertices[i][0];
                y = vertices[i][1];
                z = vertices[i][2];
                var vector = new THREE.Vector3(x, y, z);
                base.vertices.push(vector);
            }
            var material = new THREE.ParticleBasicMaterial({ color : color });
            var poligono = new THREE.Line(base, material);
            return poligono;
        }
        function poliedro(lado, porc, n, h, color){
            //Generacion vertices
            var base1ver = poligonoVertices(lado, n, 0);
            var base2ver = poligonoVertices((lado*porc)/100, n, h);

            //Generacion geometrias
            var base1 = poligonoGeometria(base1ver, color);
            var base2 = poligonoGeometria(base2ver, color);
            var lineas = [];

            //Generacion Lineas
            for(var i = 0; i < n; i++){
                var vertices = [base1ver[i], base2ver[i]];
                lineas[i] = poligonoGeometria(vertices, color);
                //Añadir linea
                scene.add(lineas[i]);
            }
            //Añadir bases
            scene.add(base1);
            scene.add(base2);
        }

        var scene = new THREE.Scene();

        //Cámara
        var camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 1000);

        var renderer = new THREE.WebGLRenderer();
        renderer.setClearColor(0x000000, 1.0);
        renderer.setSize(window.innerWidth, window.innerHeight);

        //Parámetros Escena
        var size = 700;
        var arrowSize = 40;
        var divisions = 20;
        var origin = new THREE.Vector3(0, 0, 0);
        var x = new THREE.Vector3(1, 0, 0);
        var y = new THREE.Vector3(0, 1, 0);
        var z = new THREE.Vector3(0, 0, 1);
        var color2 = new THREE.Color(0x333333);
        var colorR = new THREE.Color(0xAA0000);
        var colorG = new THREE.Color(0x00AA00);
        var colorB = new THREE.Color(0x0000AA);

        //Control Espacio 3D
        var controls = new OrbitControls(camera, renderer.domElement);

        //Malla plano xz
        var gridHelperXZ = new THREE.GridHelper(size, divisions, color2, color2);

        //Flechas
        var arrowX = new THREE.ArrowHelper(x, origin, arrowSize, colorR);
        var arrowY = new THREE.ArrowHelper(y, origin, arrowSize, colorG);
        var arrowZ = new THREE.ArrowHelper(z, origin, arrowSize, colorB);

        //Posición cámara
        camera.position.x = 200;
        camera.position.y = 200;
        camera.position.z = 200;
        camera.lookAt(scene.position);

        document.body.appendChild(renderer.domElement);

        //Agregar a la escena
        scene.add(gridHelperXZ);
        scene.add(arrowX);
        scene.add(arrowY);
        scene.add(arrowZ);

        //Parametros poliedro
        var lado = 10;
        var n_lados = 3;
        var altura = 30;
        var porcentaje = 200;
        var color = 0x5eff00;

        poliedro(lado, porcentaje, n_lados, altura, color);
        function render() {
            requestAnimationFrame(render);
            renderer.render(scene, camera);
        }

        render();
    </script>  
</body>
</html>